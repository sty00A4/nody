; control flow
(def-global-inline @if $(cond bool case closure)
    #(do (? cond case #())))
(def-global-inline @if $(cond bool case closure else closure)
    #(do (? cond case else)))
; logic
(def-global @not $(v bool) #(? (bool v) false true))
(def-global @or $(a any b any) #(? (bool a) a b))
(def-global @and $(a any b any)
    #(? (bool a)
        (? (bool b)
            b
            false)
        false))
(def-global @xor $(a any b any)
    #(? (and a (not (bool b)))
        a
        (? (and b (not (bool a)))
            b
            false)))
; math
(def-global @sum $(nums (vec int))
    #{
        (mut @res 0)
        (for @n nums
            #(set @res (+ res n)))
        (return res)
    })