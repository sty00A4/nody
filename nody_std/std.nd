; control flow
(def-global-inline @if $(:cond bool :case closure)
    #(do (? :cond :case #())))
(def-global-inline @if $(:cond bool :case closure :else closure)
    #(do (? :cond :case :else)))
; logic
(def-global @not $(v bool) #(? (bool v) false true))
(def-global @or $(a any b any) #(? (bool a) a b))
(def-global @and $(a any b any)
    #(? (bool a)
        (? (bool b)
            b
            false)
        false))
(def-global @xor $(a any b any)
    #(? (and a (not (bool b)))
        a
        (? (and b (not (bool a)))
            b
            false)))
; math
(def-global @sum $(nums (vec int)) #{
	(mut @res 0)
	(for @n nums
		#(set @res (+ res n)))
	(return res)
})
(def-global @sum $(nums (vec float)) #{
	(mut @res 0.0)
	(for @n nums
		#(set @res (+ res n)))
	(return res)
})
(def-global @sum $(nums int *) #(sum nums))
(def-global @sum $(nums float *) #(sum nums))
(def-global @min $(nums (vec int)) #{
	(if (= 0 (len nums)) #(return 0))
	(mut @v (nums 0))
	(for @n nums
		#(if (< n v) #(set @v n)))
	(return v)
})
(def-global @min $(nums (vec float)) #{
	(if (= 0 (len nums)) #(return 0.0))
	(mut @v (nums 0))
	(for @n nums
		#(if (< n v) #(set @v n)))
	(return v)
})
(def-global @min $(nums int *) #(min nums))
(def-global @min $(nums float *) #(min nums))
(def-global @max $(nums (vec int)) #{
	(if (= 0 (len nums)) #(return 0))
	(mut @v (nums 0))
	(for @n nums
		#(if (> n v) #(set @v n)))
	(return v)
})
(def-global @max $(nums (vec float)) #{
	(if (= 0 (len nums)) #(return 0.0))
	(mut @v (nums 0))
	(for @n nums
		#(if (> n v) #(set @v n)))
	(return v)
})
(def-global @max $(nums int *) #(max nums))
(def-global @max $(nums float *) #(max nums))
; stings
(def-global @concat $(values (vec any)) #{
	(mut @res "")
	(for @v values
		#(set @res (+ res (str v))))
	(return res)
})
(def-global @concat $(values any *) #(concat values))
(def-global @join $(sep str values (vec any)) #{
	(mut @res "")
	(for @v values
		#(set @res (+ res (str v) sep)))
	(if (and (> (len res) 0) (> (len sep) 0))
		#(set @res (res 0 (- (len res) (len sep)))))
	(return res)
})
(def-global @join $(sep str values any *) #(join sep values))
(def-global @digit? $(s str) #(contains ["1" "2" "3" "4" "5" "6" "7" "8" "9" "0"] s))
(def-global @digit? $(c char) #(contains ['1' '2' '3' '4' '5' '6' '7' '8' '9' '0'] c))
; vectors
(def-global @count $(v vec item any) #{
	(mut @c 0)
	(for @x v #(if (= x item) #(set @c (+ c 1))))
	(return c)
})
(def-global @count $(s str c char) #{
	(mut @c 0)
	(for @i (len s) #(if (= c (s i)) #(set @c (+ c 1))))
	(return c)
})
; io
(def-global @input-num $(msg str) #{
	(let @num (input msg))
	(for @i (len num)
		#(if (not (digit? (num i))) #(return 0)))
	(return (int num))
})